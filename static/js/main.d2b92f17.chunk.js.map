{"version":3,"sources":["redux/actionConstants.js","redux/reducers/contactListReducer.js","redux/reducers/index.js","redux/actions/contactListActions.js","components/navbar/Navbar.js","components/searchForm/SearchInput.js","components/contacts/ContactItem.js","components/contacts/ContactList.js","views/RootView.js","reportWebVitals.js","index.js"],"names":["contactListActions","initialState","contactList","isLoading","isError","rootReducer","combineReducers","contact","state","action","type","payload","compareLastName","a","b","A","last_name","toUpperCase","B","comparison","useStyles","makeStyles","theme","appBar","background","navbarTitle","flexGrow","textAlign","Navbar","classes","AppBar","position","className","Toolbar","Typography","searchInput","border","backgroundColor","width","fontFamily","fontSize","outline","searchFormWrapper","searchIcon","color","marginRight","SearchInput","useState","inputValue","setInputValue","Box","pt","pb","Container","display","alignItems","value","placeholder","onChange","e","target","listItem","borderBottom","contactName","fontWeight","email","ContactItem","labelId","handleToggle","checked","ListItem","button","ListItemAvatar","Avatar","alt","first_name","src","avatar","ListItemText","id","primary","primaryTypographyProps","variant","ListItemSecondaryAction","Checkbox","edge","indexOf","inputProps","root","ContactList","setChecked","currentIndex","newChecked","push","splice","useEffect","length","console","log","List","map","height","RootView","dispatch","useDispatch","useSelector","axios","get","data","sortedByLastName","sort","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2b92f17.chunk.js","sourcesContent":["export const contactListActions = {\r\n  FETCH_CONTACTS_START: \"FETCH_CONTACTS_START\",\r\n  FETCH_CONTACTS_SUCCESS: \"FETCH_CONTACTS_SUCCESS\",\r\n  FETCH_CONTACTS_FAIL: \"FETCH_CONTACTS_FAIL\",\r\n};\r\n","import { contactListActions } from \"./../actionConstants\";\r\n\r\nconst initialState = {\r\n  contactList: [],\r\n  isLoading: false,\r\n  isError: false,\r\n};\r\n\r\nexport const contactListReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case contactListActions.FETCH_CONTACTS_START:\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        isError: false,\r\n        contactList: [],\r\n      };\r\n    case contactListActions.FETCH_CONTACTS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        contactList: [...action.payload],\r\n      };\r\n    case contactListActions.FETCH_CONTACTS_FAIL:\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        isError: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport { contactListReducer } from \"./contactListReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  contact: contactListReducer,\r\n});\r\n","import axios from \"axios\";\r\n\r\nimport { contactListActions } from \"./../actionConstants\";\r\n\r\nexport const fetchContactList = () => async (dispatch) => {\r\n  const url =\r\n    \"https://teacode-recruitment-challenge.s3.eu-central-1.amazonaws.com/users.json\";\r\n\r\n  try {\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_START,\r\n    });\r\n    const { data } = await axios.get(url);\r\n    const sortedByLastName = data.sort(compareLastName);\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_SUCCESS,\r\n      payload: sortedByLastName,\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: contactListActions.FETCH_CONTACTS_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nconst compareLastName = (a, b) => {\r\n  const A = a.last_name.toUpperCase();\r\n  const B = b.last_name.toUpperCase();\r\n\r\n  let comparison = 0;\r\n  if (A > B) {\r\n    comparison = 1;\r\n  } else if (A < B) {\r\n    comparison = -1;\r\n  }\r\n  return comparison;\r\n};\r\n","import { AppBar, Toolbar, Typography, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    background: \"linear-gradient(90deg, #5BB0C4 0%, #1BA386 100%)\",\r\n  },\r\n  navbarTitle: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nexport function Navbar() {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\" className={classes.appBar}>\r\n      <Toolbar>\r\n        <Typography className={classes.navbarTitle}>Contacts</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\n\r\nimport { Box, makeStyles, Container } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchInput: {\r\n    border: \"none\",\r\n    backgroundColor: \"transparent\",\r\n    width: \"100%\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    fontSize: \"18px\",\r\n    \"&:focus-visible\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  searchFormWrapper: {\r\n    backgroundColor: \"#fff\",\r\n  },\r\n  searchIcon: {\r\n    color: \"#aaa\",\r\n    marginRight: \"10px\",\r\n  },\r\n}));\r\n\r\nexport function SearchInput() {\r\n  const classes = useStyles();\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const handleToggle = (e) => {\r\n    setInputValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Box pt={3} pb={3} className={classes.searchFormWrapper}>\r\n        <Container>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <input\r\n              value={inputValue}\r\n              className={classes.searchInput}\r\n              placeholder=\"Search\"\r\n              onChange={handleToggle}\r\n            />\r\n          </Box>\r\n        </Container>\r\n      </Box>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  ListItem,\r\n  ListItemAvatar,\r\n  Avatar,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  Checkbox,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem: {\r\n    borderBottom: \"1px solid #ccc\",\r\n  },\r\n  contactName: {\r\n    fontWeight: \"bold\",\r\n  },\r\n  email: {\r\n    color: \"#676767\",\r\n    fontSize: \"15px\",\r\n  },\r\n}));\r\n\r\nexport function ContactItem({ value, labelId, handleToggle, checked }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <ListItem button className={classes.listItem}>\r\n      <ListItemAvatar>\r\n        <Avatar\r\n          alt={`${value.first_name} ${value.last_name} avatar`}\r\n          src={value.avatar}\r\n        />\r\n      </ListItemAvatar>\r\n      <div>\r\n        <ListItemText\r\n          id={labelId}\r\n          primary={`${value.first_name}  ${value.last_name} `}\r\n          primaryTypographyProps={{ variant: \"inherit\" }}\r\n          className={classes.contactName}\r\n        />\r\n        <ListItemText\r\n          id={labelId}\r\n          primary={value.email}\r\n          primaryTypographyProps={{ variant: \"inherit\" }}\r\n          className={classes.email}\r\n        />\r\n      </div>\r\n      <ListItemSecondaryAction>\r\n        <Checkbox\r\n          edge=\"end\"\r\n          onChange={handleToggle(value.id)}\r\n          checked={checked.indexOf(value.id) !== -1}\r\n          inputProps={{ \"aria-labelledby\": labelId }}\r\n        />\r\n      </ListItemSecondaryAction>\r\n    </ListItem>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { List, makeStyles } from \"@material-ui/core\";\r\nimport LazyLoad from \"react-lazyload\";\r\n\r\nimport { ContactItem } from \"./ContactItem\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  listItem: {\r\n    borderBottom: \"1px solid #ccc\",\r\n  },\r\n}));\r\n\r\nexport function ContactList({ contactList }) {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState([]);\r\n\r\n  const handleToggle = (value) => () => {\r\n    const currentIndex = checked.indexOf(value);\r\n    const newChecked = [...checked];\r\n\r\n    if (currentIndex === -1) {\r\n      newChecked.push(value);\r\n    } else {\r\n      newChecked.splice(currentIndex, 1);\r\n    }\r\n\r\n    setChecked(newChecked);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (checked.length > 0) {\r\n      console.log(checked);\r\n    } else {\r\n      console.log(\"Contact list is empty\");\r\n    }\r\n  }, [checked]);\r\n\r\n  return (\r\n    <List className={classes.root}>\r\n      {contactList.map((contact) => {\r\n        const labelId = `checkbox-list-label-${contact.id}`;\r\n        return (\r\n          <LazyLoad key={contact.id} height={\"50px\"}>\r\n            <ContactItem\r\n              value={contact}\r\n              labelId={labelId}\r\n              handleToggle={handleToggle}\r\n              checked={checked}\r\n            />\r\n          </LazyLoad>\r\n        );\r\n      })}\r\n    </List>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Container, Typography } from \"@material-ui/core\";\n\nimport { fetchContactList } from \"./../redux/actions/contactListActions\";\nimport { Navbar } from \"./../components/navbar/Navbar\";\nimport { SearchInput } from \"./../components/searchForm/SearchInput\";\nimport { ContactList } from \"./../components/contacts/ContactList\";\n\nexport function RootView() {\n  const dispatch = useDispatch();\n  const { contactList, isError } = useSelector((state) => state.contact);\n\n  useEffect(() => {\n    dispatch(fetchContactList());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Navbar />\n      <SearchInput contactList={contactList} />\n      <Container>\n        {isError ? (\n          <Typography>something went wrong</Typography>\n        ) : (\n          <ContactList contactList={contactList} />\n        )}\n      </Container>\n    </>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"fontsource-roboto\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { Provider } from \"react-redux\";\n\nimport { rootReducer } from \"./redux/reducers/index\";\nimport \"./index.css\";\nimport { RootView } from \"./views/RootView\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nfunction configureStore() {\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n  );\n  return store;\n}\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <RootView />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}